const db = require("../models");
const Tuto3 = db.tuto2;


exports.create = (req, res) => {

  if (!req.body.title) {
    res.status(400).send({ message: "Content can not be empty!" });
    return;
  }


  const tuto = new Tuto3({
    title: req.body.title,
    description: req.body.description,
    published: req.body.published ? req.body.published : false
  });


  tuto
    .save(tuto)
    .then(data => {
      res.send(data);
    })
    .catch(err => {
      res.status(500).send({
        message:
          err.message || "Some error occurred while creating the Tuto3."
      });
    });
};


exports.findAll = (req, res) => {
  const title = req.query.title;
  var condition = title ? { title: { $regex: new RegExp(title), $options: "i" } } : {};

  Tuto3.find(condition)
    .then(data => {
      res.send(data);
    })
    .catch(err => {
      res.status(500).send({
        message:
          err.message || "Some error occurred while retrieving tuto2."
      });
    });
};


exports.findOne = (req, res) => {
  const id = req.params.id;

  Tuto3.findById(id)
    .then(data => {
      if (!data)
        res.status(404).send({ message: "Not found Tuto3 with id " + id });
      else res.send(data);
    })
    .catch(err => {
      res
        .status(500)
        .send({ message: "Error retrieving Tuto3 with id=" + id });
    });
};


exports.update = (req, res) => {
  if (!req.body) {
    return res.status(400).send({
      message: "Data to update can not be empty!"
    });
  }

  const id = req.params.id;

  Tuto3.findByIdAndUpdate(id, req.body, { useFindAndModify: false })
    .then(data => {
      if (!data) {
        res.status(404).send({
          message: `Cannot update Tuto3 with id=${id}. Maybe Tuto3 was not found!`
        });
      } else res.send({ message: "Tuto3 was updated successfully." });
    })
    .catch(err => {
      res.status(500).send({
        message: "Error updating Tuto3 with id=" + id
      });
    });
};


exports.delete = (req, res) => {
  const id = req.params.id;

  Tuto3.findByIdAndRemove(id, { useFindAndModify: false })
    .then(data => {
      if (!data) {
        res.status(404).send({
          message: `Cannot delete Tuto3 with id=${id}. Maybe Tuto3 was not found!`
        });
      } else {
        res.send({
          message: "Tuto3 was deleted successfully!"
        });
      }
    })
    .catch(err => {
      res.status(500).send({
        message: "Could not delete Tuto3 with id=" + id
      });
    });
};


exports.deleteAll = (req, res) => {
  Tuto3.deleteMany({})
    .then(data => {
      res.send({
        message: `${data.deletedCount} Tuto2 were deleted successfully!`
      });
    })
    .catch(err => {
      res.status(500).send({
        message:
          err.message || "Some error occurred while removing all tuto2."
      });
    });
};


exports.findAllPublished = (req, res) => {
  Tuto3.find({ published: true })
    .then(data => {
      res.send(data);
    })
    .catch(err => {
      res.status(500).send({
        message:
          err.message || "Some error occurred while retrieving tuto2."
      });
    });
};
